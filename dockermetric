#!/usr/bin/env python

import sys
import os
import re
import time
import argparse
import json
import math


parser = argparse.ArgumentParser(description='Fetch some useful pod Kubernetes statistics ')
parser.add_argument('containerPrefix', metavar='CONTAINER_PREFIX_NAME', type=str,
                   help='Container name prefix that should be measured')
parser.add_argument('-w', dest='watch',
                   default=False, action='store_true',
                   help='Watch Docker to change state')

args = parser.parse_args()
app_name = args.containerPrefix
watch = args.watch

nameColLength = 30

dockerInfo = json.loads(os.popen("docker info -f '{{json .}}'").read())
cpus = dockerInfo['NCPU']

loop = True
try:
    print('CONTAINER%s\tCPU\tMEMORY\tLimCPU\tLimMEM' % (' ' * (nameColLength - 9)))

    while loop:
        info = os.popen("docker stats --no-stream --format '{{json .}}' %s" % app_name).read().strip()
        info = info.split("\n")
        if len(info) != 1:
            raise BaseException("Please inform a valid container name")        
        info = json.loads(info[0])

        command = "docker inspect %s" % app_name
        output = json.loads(os.popen(command).read().strip())
        output = output[0]

        cpu = 0.0
        mem = 0.0
        cpuMax = float(output['HostConfig']['CpuShares'])
        memMax = output['HostConfig']['Memory']
        
        pMem = 0.0
        cpu += eval(info['CPUPerc'].replace('%', '*%s' % cpus))
        mem += eval(info['MemUsage'].split(' ')[0].replace('MiB', '').replace('GiB', '*1024'))
        pMem = info['MemPerc']

        if mem > 1024:
            mem /= 1024
            mem = '%sGi' % int(math.ceil(mem))
        else:
            mem = '%sMi' % int(math.ceil(mem))
        
        pCPU = 0
        if cpuMax > 0:
            pCPU = int(math.ceil((cpu / cpuMax)*100))

        cpu *= 100
        app_name_spacing = ' ' * (nameColLength - len(app_name))
        print('%s%s\t%sm\t%s\t%s%%\t%s' % (app_name, app_name_spacing, int(math.ceil(cpu)), mem, pCPU, pMem))

        if not watch:
            loop = False
        else:
            time.sleep(3)
except KeyboardInterrupt:
    pass
except:
    raise
